server {
    listen 80;
    server_name blog.local;  # 修改为你自己的域名或 IP

    # 强制 HTTP -> HTTPS
    return 301 https://$host$request_uri;
}

server {
    listen 443 ssl http2;
    server_name blog.local;  # 修改为你自己的域名

    # 设置客户端请求体最大大小
    client_max_body_size 300m;

    ssl_trusted_certificate /etc/letsencrypt/live/blog.local/chain.pem;  # 替换为实际的证书链路径

    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256';
    ssl_prefer_server_ciphers on;

    # 增加安全性
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 1d;
    ssl_session_tickets off;  # 禁用会话票据，进一步增强安全性

    # HSTS 强制客户端使用 HTTPS（根据需要启用）
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

    # 启用 HTTP/2
    http2_max_field_size 16k;
    http2_max_header_size 32k;

    # SSL 配置文件
    include /etc/letsencrypt/options-ssl-nginx.conf;
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

    # 启用 Gzip 压缩，减小响应体积，提升加载速度
    gzip on;
    gzip_disable "msie6";
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_types text/plain text/css application/javascript application/json application/xml image/svg+xml;

    # 配置反向代理到前端和后端
    location / {
        proxy_pass http://localhost:3000;  # 前端服务
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # 防止缓存前端静态资源
        proxy_cache_bypass $http_upgrade;
    }

    location /api/v1/ {
        proxy_pass http://localhost:8000;  # 后端服务
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # 防止缓存 API 请求
        proxy_cache_bypass $http_upgrade;
    }
}

# 增加一个额外的配置来处理静态资源等缓存设置
server {
    listen 443 ssl;
    server_name blog.local;  # 修改为你自己的域名

    # SSL 配置
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256';
    ssl_prefer_server_ciphers on;

    # 强制 HTTPS 的 HTTP Security Headers
    add_header X-Content-Type-Options "nosniff";
    add_header X-Frame-Options "SAMEORIGIN";
    add_header X-XSS-Protection "1; mode=block";
    add_header Content-Security-Policy "default-src 'self';" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin";
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;

}

